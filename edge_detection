#edge_detection.py

import cv2
import numpy as np
import math
image = cv2.imread('task1.png',0)

def kernel_y():
	yMatrix = np.zeros((3, 3))
	yMatrix[0,0]= 1
	yMatrix[0,1]= 2
	yMatrix[0,2]= 1
	yMatrix[1,0]= 0
	yMatrix[1,1]= 0
	yMatrix[1,2]= 0
	yMatrix[2,0]= -1
	yMatrix[2,1]= -2
	yMatrix[2,2]= -1

	Gy = conv(yMatrix, image)
	return Gy

def kernel_x():
	xMatrix = np.zeros((3, 3))
	xMatrix[0,0]= 1
	xMatrix[0,1]= 0
	xMatrix[0,2]= -1
	xMatrix[1,0]= 2
	xMatrix[1,1]= 0
	xMatrix[1,2]= -2
	xMatrix[2,0]= 1
	xMatrix[2,1]= 0
	xMatrix[2,2]= -1

	print (xMatrix)

	Gx = conv(xMatrix, image) # Gx = img_conv
	return Gx

def gradeMag(Gx,Gy):
	
	img_edge = np.zeros(Gx.shape)
	img_x_sq = np.zeros(Gx.shape)
	for i in range (0,Gx.shape[0]):
		for j in range(0,Gx.shape[1]):
			img_edge[i][j] = math.sqrt(Gx[i][j]**2 + Gy[i][j]**2)	#((sum(Gx[i][j]**2,Gy[i][j]**2))**0.5)
			# img_edge[i][j] = G
			# img_edge[i][j]=G

			# if(G > 50):
			# 	img_edge[i][j]=255
			# 	img_x_sq[i][j]= (255 ** 2)
			# else:
			# 	img_edge[i][j]=0

	return img_edge


# def cut_image(image):
# 	r = image.shape[0] -1
# 	s = image.shape[1] -1
# 	c_img = np.zeros(shape(r,s))
	
# 	for i in range (1,r):
# 		for j in raneg( 1,s):
# 			c_img[i,j] = image[i][j]
# 	return c_img


def conv(X, img):
	img_conv = np.zeros(img.shape)
	X = X[::-1, ::-1]
	img_h = img.shape[0]
	img_w = img.shape[1]
	print(X)

	X_h = X.shape[0]
	X_w = X.shape[1]

	start_h = 1
	start_w = 1

	r = img_h -1
	s = img_w -1

	for i in range (start_h, r):
		for j in range (start_w, s):
			con = 0
			for m in range(0, X.shape[0]):
				for n in range(0, X.shape[1]):
					con = con +  X[m][n] * img[i-start_h+m][j-start_w+n]
					img_conv[i][j] = con
	return img_conv

Gx = kernel_x()
Gy = kernel_y()
cv2.imwrite("gx.jpg", Gx)
cv2.imwrite("gy.jpg", Gy)
gxy= gradeMag(Gx,Gy)
cv2.imwrite('GXY.jpg',gxy)
#final_image = gradeMag(Gx,Gy)
#cv2.imshow("output_image", final_image)
cv2.waitKey()



			




